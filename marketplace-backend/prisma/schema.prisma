generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int                     @id @default(autoincrement())
  name                 String
  email                String                  @unique
  password             String
  role                 String
  createdAt            DateTime                @default(now())
  lastName             String                  @default("")
  phone                String                  @default("")
  avatarUrl            String?
  isVerified           Boolean                 @default(false)
  updatedAt            DateTime                @default(now()) @updatedAt
  AnalyticsActivity    AnalyticsUserActivity[]
  Bookings             Booking[]
  PaymentNotifications PaymentNotification[]   @relation("PaymentNotifications")
  Professional         Professional?           @relation("UserToProfessional")
  Reviews              Review[]
  ClientPayments       ServicePayment[]        @relation("ClientPayments")
  UrgentBookings       UrgentBooking[]
}

model Professional {
  id                    Int                     @id @default(autoincrement())
  userId                Int                     @unique
  description           String?
  experience            Int?
  createdAt             DateTime                @default(now())
  locationId            Int?
  avgRating             Float                   @default(0)
  bio                   String?
  completedJobs         Int                     @default(0)
  isVerified            Boolean                 @default(false)
  latitude              Float?
  longitude             Float?
  priceFrom             Float?
  respondsQuickly       Boolean                 @default(false)
  supportsUrgent        Boolean                 @default(false)
  updatedAt             DateTime                @default(now()) @updatedAt
  emergencyService      Boolean                 @default(false)
  insurance             String?
  languages             Json?
  responseTime          Int?
  satisfactionRate      Float                   @default(0)
  workingHours          String?
  isFeatured            Boolean                 @default(false)
  isPriority            Boolean                 @default(false)
  leadsResetDate        DateTime                @default(now())
  monthlyLeadLimit      Int                     @default(5)
  monthlyLeadsUsed      Int                     @default(0)
  subscriptionExpiresAt DateTime?
  subscriptionPlan      String                  @default("free")
  subscriptionStatus    String                  @default("active")
  onboardingCompletedAt DateTime?
  Availability          Availability[]
  Certifications        Certification[]
  Commissions           Commission[]
  LeadContacts          LeadContact[]
  Portfolio             PortfolioImage[]
  location              Location?               @relation(fields: [locationId], references: [id])
  User                  User                    @relation("UserToProfessional", fields: [userId], references: [id])
  Specialties           ProfessionalSpecialty[]
  Reviews               Review[]
  Services              Service[]
  ServicePayments       ServicePayment[]        @relation("ProfessionalPayments")
  Subscriptions         Subscription[]
  UrgentBookings        UrgentBooking[]
  VerificationRequests  VerificationRequest[]
}

model Category {
  id                Int                @id @default(autoincrement())
  name              String
  icon              String?
  value             String             @default("")
  avgPrice          Float?
  priceRange        String?
  SearchSuggestions SearchSuggestion[]
  Services          Service[]
  Specialties       Specialty[]
}

model Service {
  id                Int          @id @default(autoincrement())
  professionalId    Int
  categoryId        Int
  title             String
  description       String?
  price             Float
  createdAt         DateTime     @default(now())
  estimatedTime     String?
  includesMaterials Boolean      @default(false)
  isUrgentAvailable Boolean      @default(false)
  priceType         String       @default("hourly")
  updatedAt         DateTime     @default(now()) @updatedAt
  urgentSurcharge   Float?
  Bookings          Booking[]
  Category          Category     @relation(fields: [categoryId], references: [id])
  Professional      Professional @relation(fields: [professionalId], references: [id])
}

model Booking {
  id                Int              @id @default(autoincrement())
  userId            Int
  serviceId         Int
  status            String
  bookingDate       DateTime
  createdAt         DateTime         @default(now())
  description       String?
  estimatedPrice    Float?
  finalPrice        Float?
  includesMaterials Boolean          @default(false)
  updatedAt         DateTime         @default(now()) @updatedAt
  paymentStatus     String           @default("pending")
  Service           Service          @relation(fields: [serviceId], references: [id])
  User              User             @relation(fields: [userId], references: [id])
  ServicePayments   ServicePayment[]
}

model Review {
  id             Int          @id @default(autoincrement())
  userId         Int
  professionalId Int
  rating         Int
  comment        String?
  createdAt      DateTime     @default(now())
  aspectRatings  Json?
  helpful        Int          @default(0)
  isAnonymous    Boolean      @default(false)
  service        String?
  serviceDate    DateTime?
  updatedAt      DateTime     @default(now()) @updatedAt
  wouldRecommend Boolean      @default(true)
  Professional   Professional @relation(fields: [professionalId], references: [id])
  User           User         @relation(fields: [userId], references: [id])
}

model Location {
  id            Int            @id @default(autoincrement())
  city          String
  country       String         @default("Argentina")
  postalCode    String         @default("")
  province      String         @default("")
  latitude      Float?
  longitude     Float?
  professionals Professional[]
}

model PortfolioImage {
  id             Int          @id @default(autoincrement())
  professionalId Int
  url            String
  title          String?
  description    String?
  orderIndex     Int          @default(0)
  createdAt      DateTime     @default(now())
  Professional   Professional @relation(fields: [professionalId], references: [id])
}

model UrgentBooking {
  id             Int          @id @default(autoincrement())
  userId         Int
  professionalId Int
  timeframe      String
  description    String?
  surchargeRate  Float
  estimatedPrice Float?
  status         String       @default("pending")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt
  Professional   Professional @relation(fields: [professionalId], references: [id])
  User           User         @relation(fields: [userId], references: [id])
}

model Availability {
  id             Int          @id @default(autoincrement())
  professionalId Int
  dayOfWeek      Int
  startTime      String
  endTime        String
  isAvailable    Boolean      @default(true)
  Professional   Professional @relation(fields: [professionalId], references: [id])
}

model SearchSuggestion {
  id            Int      @id @default(autoincrement())
  categoryId    Int
  text          String
  icon          String?
  estimatedTime String?
  avgPrice      String?
  isUrgent      Boolean  @default(false)
  popularity    Int      @default(0)
  Category      Category @relation(fields: [categoryId], references: [id])
}

model VerificationRequest {
  id             Int          @id @default(autoincrement())
  professionalId Int
  documentType   String
  documentNumber String
  workLicense    String?
  certifications Json?
  experience     String?
  references     Json?
  status         String       @default("pending")
  reviewedBy     String?
  reviewNotes    String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt
  Professional   Professional @relation(fields: [professionalId], references: [id])
}

model Certification {
  id             Int          @id @default(autoincrement())
  professionalId Int
  name           String
  type           String
  issuer         String?
  issueDate      DateTime?
  expiryDate     DateTime?
  certificateUrl String?
  isVerified     Boolean      @default(false)
  createdAt      DateTime     @default(now())
  Professional   Professional @relation(fields: [professionalId], references: [id])
}

model Specialty {
  id            Int                     @id @default(autoincrement())
  name          String                  @unique
  categoryId    Int?
  description   String?
  icon          String?
  Professionals ProfessionalSpecialty[]
  Category      Category?               @relation(fields: [categoryId], references: [id])
}

model ProfessionalSpecialty {
  id              Int          @id @default(autoincrement())
  professionalId  Int
  specialtyId     Int
  yearsExperience Int?
  isMain          Boolean      @default(false)
  Professional    Professional @relation(fields: [professionalId], references: [id])
  Specialty       Specialty    @relation(fields: [specialtyId], references: [id])

  @@unique([professionalId, specialtyId])
}

model SubscriptionPlan {
  id               String         @id
  name             String
  description      String
  price            Float
  yearlyPrice      Float?
  monthlyLeadLimit Int
  isPriority       Boolean        @default(false)
  isFeatured       Boolean        @default(false)
  customBadge      String?
  features         Json
  isActive         Boolean        @default(true)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @default(now()) @updatedAt
  Subscriptions    Subscription[]
}

model Subscription {
  id             Int              @id @default(autoincrement())
  professionalId Int
  planId         String
  status         String
  startDate      DateTime         @default(now())
  expiresAt      DateTime?
  autoRenew      Boolean          @default(true)
  paymentMethod  String?
  externalId     String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now()) @updatedAt
  Payments       Payment[]
  Plan           SubscriptionPlan @relation(fields: [planId], references: [id])
  Professional   Professional     @relation(fields: [professionalId], references: [id])
}

model Payment {
  id               Int             @id @default(autoincrement())
  type             String
  amount           Float
  currency         String          @default("ARS")
  status           String
  paymentMethod    String
  externalId       String?
  externalData     Json?
  description      String?
  subscriptionId   Int?
  servicePaymentId Int?
  commissionId     Int?
  platformFee      Float?
  processingFee    Float?
  netAmount        Float?
  paidAt           DateTime?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @default(now()) @updatedAt
  Commission       Commission?     @relation(fields: [commissionId], references: [id])
  ServicePayment   ServicePayment? @relation(fields: [servicePaymentId], references: [id])
  Subscription     Subscription?   @relation(fields: [subscriptionId], references: [id])
}

model ServicePayment {
  id                 Int          @id @default(autoincrement())
  bookingId          Int
  clientUserId       Int
  professionalId     Int
  amount             Float
  platformFee        Float        @default(0)
  professionalAmount Float
  status             String       @default("pending")
  paymentMethod      String?
  isAdvancePayment   Boolean      @default(false)
  advancePercentage  Float?
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @default(now()) @updatedAt
  Payments           Payment[]
  Booking            Booking      @relation(fields: [bookingId], references: [id])
  ClientUser         User         @relation("ClientPayments", fields: [clientUserId], references: [id])
  Professional       Professional @relation("ProfessionalPayments", fields: [professionalId], references: [id])
}

model Commission {
  id               Int          @id @default(autoincrement())
  professionalId   Int
  servicePaymentId Int?
  subscriptionId   Int?
  type             String
  baseAmount       Float
  percentage       Float
  amount           Float
  status           String       @default("pending")
  collectedAt      DateTime?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @default(now()) @updatedAt
  Professional     Professional @relation(fields: [professionalId], references: [id])
  Payments         Payment[]
}

model CommissionConfig {
  id                        Int      @id @default(autoincrement())
  serviceFeePercentage      Float    @default(0.05)
  subscriptionFeePercentage Float    @default(0.0)
  processingFeePercentage   Float    @default(0.029)
  minCommission             Float    @default(100)
  maxCommission             Float?
  isActive                  Boolean  @default(true)
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @default(now()) @updatedAt
}

model PaymentNotification {
  id        Int       @id @default(autoincrement())
  type      String
  userId    Int?
  title     String
  message   String
  data      Json?
  isRead    Boolean   @default(false)
  priority  String    @default("normal")
  createdAt DateTime  @default(now())
  readAt    DateTime?
  User      User?     @relation("PaymentNotifications", fields: [userId], references: [id])
}

model LeadContact {
  id               Int          @id @default(autoincrement())
  professionalId   Int
  clientUserId     Int?
  clientName       String?
  clientPhone      String?
  clientEmail      String?
  message          String?
  serviceRequested String?
  contactMethod    String
  isUrgent         Boolean      @default(false)
  status           String       @default("new")
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @default(now()) @updatedAt
  Professional     Professional @relation(fields: [professionalId], references: [id])
}

model FeatureFlag {
  id          String   @id @unique
  name        String
  description String?
  isEnabled   Boolean  @default(false)
  category    String   @default("general")
  configData  Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
}

model Content {
  id           String   @id
  key          String   @unique @map("content_key_unique")
  name         String
  value        String
  defaultValue String
  description  String?
  type         String   @default("text")
  category     String   @default("general")
  isActive     Boolean  @default(true)
  metadata     Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
  updatedBy    String?
}

model Announcement {
  id              Int       @id @default(autoincrement())
  title           String
  message         String
  type            String    @default("info")
  isActive        Boolean   @default(true)
  startDate       DateTime  @default(now())
  endDate         DateTime?
  targetUsers     String    @default("all")
  priority        Int       @default(0)
  actionUrl       String?
  actionText      String?
  iconUrl         String?
  backgroundColor String?
  textColor       String?
  showOnPages     Json?
  impressions     Int       @default(0)
  clicks          Int       @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @default(now()) @updatedAt
  createdBy       String?
}

model AnalyticsEvent {
  id             Int      @id @default(autoincrement())
  eventType      String
  category       String
  action         String
  label          String?
  value          Float?
  userId         Int?
  professionalId Int?
  bookingId      Int?
  sessionId      String?
  ipAddress      String?
  userAgent      String?
  referrer       String?
  metadata       Json?
  timestamp      DateTime @default(now())
  createdAt      DateTime @default(now())
}

model AnalyticsDashboard {
  id                        Int      @id @default(autoincrement())
  date                      DateTime @unique @db.Date
  totalUsers                Int      @default(0)
  newUsers                  Int      @default(0)
  totalProfessionals        Int      @default(0)
  newProfessionals          Int      @default(0)
  totalBookings             Int      @default(0)
  newBookings               Int      @default(0)
  totalRevenue              Float    @default(0)
  newRevenue                Float    @default(0)
  searchQueries             Int      @default(0)
  professionalContacts      Int      @default(0)
  userRegistrations         Int      @default(0)
  professionalRegistrations Int      @default(0)
  avgBookingValue           Float    @default(0)
  conversionRate            Float    @default(0)
  bounceRate                Float    @default(0)
  avgSessionDuration        Int      @default(0)
  topSearchTerms            Json?
  topCategories             Json?
  deviceStats               Json?
  locationStats             Json?
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @default(now()) @updatedAt
}

model AnalyticsUserActivity {
  id                     Int      @id @default(autoincrement())
  userId                 Int
  date                   DateTime @db.Date
  pageViews              Int      @default(0)
  sessionDuration        Int      @default(0)
  searches               Int      @default(0)
  bookingsCreated        Int      @default(0)
  professionalsContacted Int      @default(0)
  lastActivity           DateTime @default(now())
  createdAt              DateTime @default(now())
  updatedAt              DateTime @default(now()) @updatedAt
  User                   User     @relation(fields: [userId], references: [id])

  @@unique([userId, date])
}

model AnalyticsSearchMetrics {
  id           Int      @id @default(autoincrement())
  date         DateTime @db.Date
  searchTerm   String
  category     String?
  resultCount  Int      @default(0)
  clickThrough Int      @default(0)
  conversions  Int      @default(0)
  avgPosition  Float?
  metadata     Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt

  @@unique([date, searchTerm])
}
